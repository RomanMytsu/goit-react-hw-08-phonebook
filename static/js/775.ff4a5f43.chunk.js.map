{"version":3,"file":"static/js/775.ff4a5f43.chunk.js","mappings":"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","sources":["components/ContactFilter/ContactFilter.styled.js","redux/Filter/filter-selectors.js","components/ContactFilter/ContactFilter.jsx","redux/Contacts/contacts-selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 20px;\n  margin: 0;\n`;\nexport const FilterLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const FilterInput = styled.input`\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\n","export const selectFilter = ({ filter }) => filter.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  FilterContainer,\n  FilterInput,\n  FilterLabel,\n} from './ContactFilter.styled';\n\nimport { updateFilter } from '../../redux/Filter/filterSlice';\nimport { selectFilter } from '../../redux/Filter/filter-selectors';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(updateFilter(e.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor=\"nameFilterInput\">Find contacts by name</FilterLabel>\n      <FilterInput\n        id=\"nameFilterInput\"\n        type=\"text\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterContainer>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/Filter/filter-selectors';\n\nexport const selectContacts = ({ contacts }) => contacts.items;\n\nexport const selectIsLoading = ({ contacts }) => contacts.isLoading;\nexport const selectError = ({ contacts }) => contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactFormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0 0 20px 0;\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const FormInput = styled.input`\n  padding: 5px;\n  margin-bottom: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\nexport const FormButton = styled.button`\n  width: 150px;\n  font-size: 17px;\n  border-radius: 4px;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/Contacts/contacts-selectors';\nimport { addContacts } from '../../redux/Contacts/contacts-operations';\n\nimport {\n  ContactFormContainer,\n  FormButton,\n  FormInput,\n  FormLabel,\n} from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') return;\n\n    const isExistingContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExistingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContacts(newContact));\n    setName('');\n    setNumber('');\n  };\n  const newContact = { name: name, number: number };\n\n  return (\n    <ContactFormContainer onSubmit={handleSubmit}>\n      <FormLabel htmlFor=\"nameInput\">Name</FormLabel>\n      <FormInput\n        id=\"nameInput\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <FormLabel htmlFor=\"numberInput\">Number</FormLabel>\n      <FormInput\n        id=\"numberInput\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </ContactFormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListItemWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`;\nexport const ListItemButton = styled.button`\n  background-color: #f44336;\n  color: #fff;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n","import { ListItemButton, ListItemWrapper } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ name, number, id, onDelete }) => {\n  return (\n    <li>\n      <ListItemWrapper>\n        <span>\n          {name}: {number}\n        </span>\n        <ListItemButton\n          type=\"button\"\n          onClick={() => {\n            onDelete(id);\n          }}\n        >\n          Delete\n        </ListItemButton>\n      </ListItemWrapper>\n    </li>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 360px;\n  gap: 10px;\n  padding: 20px 20px;\n  margin: 0;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from '../../redux/Contacts/contacts-selectors';\nimport {\n  deleteContacts,\n  fetchContacts,\n} from '../../redux/Contacts/contacts-operations';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ListContainer } from './ContactList.styled';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContacts(id));\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {!filteredContacts.length && !isLoading && !isError && (\n        <p>There are no contacts</p>\n      )}\n      {filteredContacts.length > 0 && (\n        <ListContainer>\n          {filteredContacts.map(({ id, name, phone }) => {\n            return (\n              <ContactListItem\n                key={id}\n                name={name}\n                number={phone}\n                id={id}\n                onDelete={handleDeleteContact}\n              />\n            );\n          })}\n        </ListContainer>\n      )}\n    </>\n  );\n};\n","import { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <ContactForm />\n      <ContactFilter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FilterContainer","styled","_templateObject","_taggedTemplateLiteral","FilterLabel","_templateObject2","FilterInput","_templateObject3","selectFilter","_ref","filter","ContactFilter","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","htmlFor","id","type","value","onChange","e","updateFilter","target","selectContacts","contacts","items","selectIsLoading","_ref2","isLoading","selectError","_ref3","error","selectFilteredContacts","createSelector","_ref4","name","toLowerCase","includes","ContactFormContainer","FormLabel","FormInput","FormButton","_templateObject4","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","_e$target","newContact","onSubmit","preventDefault","trim","some","contact","alert","concat","addContacts","pattern","title","required","ListItemWrapper","ListItemButton","ContactListItem","onDelete","onClick","ListContainer","ContactList","isError","filteredContacts","useEffect","fetchContacts","handleDeleteContact","deleteContacts","_Fragment","Loader","length","map","phone"],"sourceRoot":""}